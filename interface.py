import plotly.express as px
import flet as ft
import pandas as pd
import json
import webbrowser as wb
import numpy as np
from flet.plotly_chart import PlotlyChart
from flet import Page, AppBar, ElevatedButton, Text, TextField, Image
from flet import CrossAxisAlignment, MainAxisAlignment, ProgressRing
from webscraping import ConsultaAnual, ConsultaMensal, ConsultaSemestral
from os import system
from datetime import date

limpa_terminal = system('cls')

consulta_anual = ConsultaAnual()
consulta_mensal = ConsultaMensal()
consulta_semestral = ConsultaSemestral()


def abrir_site(e):
    wb.open('https://jeap.rio.rj.gov.br/je-metinfosmac/boletim')


def app(page: Page):

    # Estiliza√ß√£o da janela da aplica√ß√£o
    page.theme_mode = ft.ThemeMode.LIGHT
    page.window_height = 768
    page.window_width = 1024
    page.vertical_alignment = MainAxisAlignment.CENTER
    page.horizontal_alignment = CrossAxisAlignment.CENTER
    page.window_center()
    page.title = 'Boletim de Polui√ß√£o do Rio'
    FONTE = 'comfortaa'

    # Esta√ß√µes dispon√≠veis para consulta
    estacoes = ['Centro', 'Copacabana', 'S√£o Crist√≥v√£o',
                'Tijuca', 'Iraj√°', 'Bangu', 'Campo Grande', 'Pedra de Guaratiba']

    # Campo de entrada da Esta√ß√£o
    estacao = TextField(label='Esta√ß√£o', value='', capitalization=True,
                        width=200, max_length=20)

    # Fun√ß√£o que define a esta√ß√£o a partir do bot√£o selecionado
    def escolher_estacao(bairro):
        match bairro:

            case 'Centro':
                estacao.value = 'Centro'
                page.update()
            case 'Copacabana':
                estacao.value = 'Copacabana'
                page.update()
            case 'S√£o Crist√≥v√£o':
                estacao.value = 'S√£o Crist√≥v√£o'
                page.update()
            case 'Tijuca':
                estacao.value = 'Tijuca'
                page.update()
            case 'Iraj√°':
                estacao.value = 'Iraj√°'
                page.update()
            case 'Bangu':
                estacao.value = 'Bangu'
                page.update()
            case 'Campo Grande':
                estacao.value = 'Campo Grande'
                page.update()
            case 'Pedra de Guaratiba':
                estacao.value = 'Pedra de Guaratiba'
                page.update()

    # Bot√£o que contem as op√ß√µes de esta√ß√µes para consulta
    botao_estacao = ft.PopupMenuButton(items=[
        ft.PopupMenuItem(
            text='Centro', on_click=lambda _: escolher_estacao('Centro')),
        ft.PopupMenuItem(
            text='Copacabana', on_click=lambda _: escolher_estacao('Copacabana')),
        ft.PopupMenuItem(
            text='S√£o Crist√≥v√£o', on_click=lambda _: escolher_estacao('S√£o Crist√≥v√£o')),
        ft.PopupMenuItem(
            text='Tijuca', on_click=lambda _: escolher_estacao('Tijuca')),
        ft.PopupMenuItem(
            text='Iraj√°', on_click=lambda _: escolher_estacao('Iraj√°')),
        ft.PopupMenuItem(
            text='Bangu', on_click=lambda _: escolher_estacao('Bangu')),
        ft.PopupMenuItem(
            text='Campo Grande', on_click=lambda _: escolher_estacao('Campo Grande')),
        ft.PopupMenuItem(
            text='Pedra de Guaratiba', on_click=lambda _: escolher_estacao('Pedra de Guaratiba')),
    ])

    ## P√°gina de consulta anual ##

    def page_consulta_anual(e):
        estacao.error_text = ''
        consulta_anual.dados_ano.clear()
        consulta_semestral.dados_semestre.clear()
        consulta_mensal.dados_mes.clear()
        estacao.value = ''

        page.clean()
        global ano
        ano = TextField(label='Ano', value='', width=200, max_length=4)
        estacao
        botao_consulta = ElevatedButton(text='Consultar',
                                        on_click=page_consulta_anual_click
                                        )
        botao_semestre1 = ElevatedButton(text='Dados do 1¬∫ Semestre',
                                         on_click=page_consulta_semestral1_click
                                         )
        botoa_semestre2 = ElevatedButton(text='Dados do 2¬∫ Semestre',
                                         on_click=page_consulta_semestral2_click
                                         )

        botao_voltar = ElevatedButton(text='Voltar',
                                      on_click=lambda _: main()
                                      )

        page.add(
            AppBar(title=Text('Consulta Anual', font_family=FONTE)),
            Text(value='Dados dispon√≠veis de 2017 a 2022', font_family=FONTE),
            ft.Row(controls=[ano, estacao, botao_estacao],
                   alignment='center'),
            ft.Row(
                controls=[botao_consulta,
                          botao_semestre1,
                          botoa_semestre2,
                          botao_voltar
                          ],
                alignment='center'
            ),
        )
        page.update()

    ## P√°gina de consulta anual ap√≥s o click no bot√£o ##
    def page_consulta_anual_click(e):
        # Verificando os inputs do usu√°rio
        try:
            if not ano.value:
                ano.error_text = 'Digite ano'
                page.update()
            if not int(ano.value) in range(2017, 2022):
                ano.error_text = 'Ano inv√°lido ‚ùå'
                page.update()
            if not ano.value.isdigit():
                ano.error_text = 'Digite apenas n√∫meros'
                page.update()
            if int(ano.value) in range(2017, 2023):
                if estacao.value in estacoes:
                    ano_consulta = int(ano.value)
                    page.clean()
                    page.add(

                        Text(value='Realizando consulta...\nPode levar alguns minutos. V√° tomar uma √°gua e depois volte. ü§èü•∏‚è≥',
                             size=20, font_family=FONTE
                             ),
                        Text('A consulta anual pode durar cerca de 3-4 minutos',
                             font_family=FONTE, size=14),
                        ProgressRing()
                    )
                elif not estacao.value in estacoes:
                    estacao.error_text = 'Esta√ß√£o inv√°lida ‚ùå'
                    page.update()
                    return

                # Inputs OK! Obtendo os dados
                try:
                    # Verificando se o usu√°rio j√° tem os dados
                    nome_arquivo = estacao.value.replace(' ', '_').lower()
                    caminho = f'./dados/{nome_arquivo}{ano_consulta}.json'
                    with open(caminho, 'r') as arquivo:
                        consulta_anual.dados_ano = json.load(arquivo)
                        consulta_anual.ano = ano_consulta
                    consulta_anual.estacao = estacao.value
                except FileNotFoundError:
                    # Caso n√£o tenha os dados, executa a raspagem no site
                    try:
                        consulta_anual.consulta(estacao.value, ano_consulta)
                        consulta_anual.obter_json()
                    except Exception:
                        # Ocorreu algum erro durante a raspagem
                        page.clean()
                        page.add(Text(value='Erro na consulta ü•¥',
                                      font_family=FONTE, size=25),
                                 ElevatedButton(text='Voltar',
                                                on_click=lambda _: main()),
                                 )
                        raise Exception

                # Consulta OK!
                tabela = pd.DataFrame.from_dict(consulta_anual.dados_ano,
                                                orient='index')

                fig = px.line(tabela, y='IQAr', x=tabela.index,
                              title=f'√çndice de Qualidade do Ar de {ano_consulta} - Esta√ß√£o {estacao.value}'
                              )
                fig.update_yaxes(title='√çndice')
                fig.update_xaxes(title='Meses', )

                dados_iqar = tabela[['IQAr']].replace('NA', np.nan)
                dias_indisponivel = dados_iqar.isnull().sum().to_string()[7:]
                tabela = tabela.replace('NA', np.nan)
                mp10 = tabela[['MP10']].mean().to_string()[7:]
                mp25 = tabela[['MP2.5']].mean().to_string()[6:]
                o3 = tabela[['O3']].mean().to_string()[5:]
                co = tabela[['CO']].mean().to_string()[5:]
                no2 = tabela[['NO2']].mean().to_string()[6:]
                so2 = tabela[['SO2']].mean().to_string()[6:]
                iqar = tabela[['IQAr']].mean().to_string()[7:]

                limpa_terminal

                def grafico_detalhes(e):
                    fig.show()
                page.clean()
                page.add(Text(value='Consulta realizada ü§ìüëå',
                              size=30, font_family=FONTE),
                         ft.Row(controls=[
                             ElevatedButton(on_click=lambda _: consulta_anual.obter_excel(),
                                            text='Obter Planilha'),
                             ElevatedButton(on_click=lambda _: consulta_anual.obter_csv(),
                                            text='Obter .csv'),
                             ElevatedButton(on_click=grafico_detalhes,
                                            text='Gr√°fico detalhado'),
                             ElevatedButton(text='Voltar',
                                            on_click=lambda _: main())],
                                alignment='center'
                                ),
                         Text(value=f'M√©dias dos √≠ndices no ano de {ano_consulta}',
                              font_family=FONTE),
                         Text(value=f'MP10: {mp10} | MP2.5: {mp25} | O3: {o3} | CO: {co} | NO2: {no2} | SO2: {so2} | IQAr: {iqar} ',
                              font_family=FONTE),
                         Text(value=f'Neste per√≠odo a esta√ß√£o {estacao.value} esteve indispon√≠vel {dias_indisponivel} dias.',
                         font_family=FONTE),
                         PlotlyChart(fig, expand=True)
                         )
        except ValueError:
            pass
        except:
            raise Exception

    ## P√°gina de consulta semestral 1 ap√≥s apertar o click no bot√£o ##
    def page_consulta_semestral1_click(e):
        # Verificando os inputs do usu√°rio
        try:
            if not ano.value:
                ano.error_text = 'Digite ano'
            if not int(ano.value) in range(2017, 2022):
                ano.error_text = 'Ano inv√°lido ‚ùå'
                page.update()
            if not ano.value.isdigit():
                ano.error_text = 'Digite apenas n√∫meros'
                page.update()
            if int(ano.value) in range(2017, 2023):
                if estacao.value in estacoes:
                    ano_consulta = int(ano.value)
                    page.clean()
                    page.add(
                        Text(value='Realizando consulta...\nPode levar alguns minutos. V√° tomar uma √°gua e depois volte. ü§èü•∏‚è≥',
                             size=20, font_family=FONTE
                             ),
                        ProgressRing()
                    )
                elif not estacao.value in estacoes:
                    estacao.error_text = 'Esta√ß√£o Inv√°lida! ‚ùå'
                    page.update()

                # Inputs OK! Obtendo os dados
                try:
                    # Verificando se o usu√°rio j√° tem os dados
                    nome_arquivo = estacao.value.replace(' ', '_').lower()
                    caminho = f'./dados/{nome_arquivo}{ano_consulta}-semestre{1}.json'
                    with open(caminho, 'r') as arquivo:
                        consulta_semestral.dados_semestre = json.load(arquivo)
                        consulta_semestral.ano = ano_consulta
                        consulta_semestral.semestre = 1
                    consulta_semestral.estacao = estacao.value
                except FileNotFoundError:
                    # Caso n√£o tenha os dados, executa a raspagem no site
                    try:
                        consulta_semestral.consulta(
                            estacao.value, 1, ano_consulta)
                        consulta_semestral.obter_json()
                    except Exception:
                        # Ocorreu algum erro durante a raspagem
                        page.clean()
                        page.add(Text(value='Erro na consulta ü•¥',
                                      font_family=FONTE, size=30),
                                 ElevatedButton(text='Voltar',
                                                on_click=lambda _: main()),
                                 )
                        raise Exception

                # Consulta OK! Plotando o Gr√°fico
                tabela = pd.DataFrame.from_dict(consulta_semestral.dados_semestre,
                                                orient='index')
                fig = px.line(tabela, y='IQAr', x=tabela.index,
                              title=f'√çndice de Qualidade do Ar do 1¬∫ Semestre de {ano_consulta}'
                              )
                fig.update_yaxes(title='√çndice')
                fig.update_xaxes(title='Meses', )

                # Obtendo as medidas resumo

                dados_iqar = tabela[['IQAr']].replace('NA', np.nan)
                dias_indisponivel = dados_iqar.isnull().sum().to_string()[7:]
                tabela = tabela.replace('NA', np.nan)
                mp10 = tabela[['MP10']].mean().to_string()[7:]
                mp25 = tabela[['MP2.5']].mean().to_string()[6:]
                o3 = tabela[['O3']].mean().to_string()[5:]
                co = tabela[['CO']].mean().to_string()[5:]
                no2 = tabela[['NO2']].mean().to_string()[6:]
                so2 = tabela[['SO2']].mean().to_string()[6:]
                iqar = tabela[['IQAr']].mean().to_string()[7:]
                dias_indisponivel = tabela[['IQAr']].isnull().sum().to_string()[
                    7:]

                limpa_terminal

                def grafico_detalhes(e):
                    fig.show()

                page.clean()
                page.add(Text(value='Consulta realizada ü§ìüëå',
                              size=30, font_family=FONTE),
                         ft.Row(controls=[
                             ElevatedButton(on_click=lambda _: consulta_semestral.obter_excel(),
                                            text='Obter Planilha'),
                             ElevatedButton(on_click=lambda _: consulta_semestral.obter_csv(),
                                            text='Obter .csv'),
                             ElevatedButton(on_click=grafico_detalhes,
                                            text='Gr√°fico detalhado'),
                             ElevatedButton(text='Voltar',
                                            on_click=lambda _: main())],
                                alignment='center'
                                ),
                         Text(value=f'M√©dias no 1¬∫ Semestre de {ano_consulta} - Esta√ß√£o {estacao.value}',
                              font_family=FONTE),
                         Text(value=f'MP10: {mp10} | MP2.5: {mp25} | O3: {o3} | CO: {co} | NO2: {no2} | SO2: {so2} | IQAr: {iqar} ',
                              font_family=FONTE),
                         Text(value=f'Neste per√≠odo a esta√ß√£o {estacao.value} esteve indispon√≠vel {dias_indisponivel} dias.',
                         font_family=FONTE),
                         PlotlyChart(fig, expand=True)
                         )
        except ValueError:
            pass
        except:
            raise Exception

    ## P√°gina de consulta semestral 2 ap√≥s apertar o bot√£o ##
    def page_consulta_semestral2_click(e):
        try:
            # Verificando os inputs do usu√°rio
            if not ano.value:
                ano.error_text = 'Digite ano'
            if not int(ano.value) in range(2017, 2023):
                ano.error_text = 'Ano inv√°lido ‚ùå'
                page.update()
            if not ano.value.isdigit():
                ano.error_text = 'Digite apenas n√∫meros'
                page.update()

            if int(ano.value) in range(2017, 2023):
                ano_consulta = int(ano.value)
                page.clean()
                page.add(
                    Text(value='Realizando consulta...\nPode levar alguns minutos. V√° tomar uma √°gua e depois volte. ü§èü•∏‚è≥',
                         size=25, font_family=FONTE
                         ),
                    ProgressRing()
                )
                limpa_terminal
                # Inputs OK! Obtendo os dados
                try:
                    # Verificando se o usu√°rio j√° tem os dados
                    nome_arquivo = estacao.value.replace(' ', '_').lower()
                    caminho = f'./dados/{nome_arquivo}{ano_consulta}-semestre{2}.json'
                    with open(caminho, 'r') as arquivo:
                        consulta_semestral.dados_semestre = json.load(arquivo)
                        consulta_semestral.ano = ano_consulta
                        consulta_semestral.semestre = 2

                    consulta_semestral.estacao = estacao.value
                except FileNotFoundError:
                    # Usu√°rio ainda n√£o tem os dados, executando a consulta
                    try:
                        consulta_semestral.consulta(
                            estacao.value, 2, ano_consulta)
                        consulta_semestral.obter_json()
                    except Exception:
                        # Ocorreu algum erro durante a raspagem
                        page.clean()
                        page.add(Text(value='Erro na consulta ü•¥',
                                      font_family=FONTE, size=30),
                                 ElevatedButton(text='Voltar',
                                                on_click=lambda _: main()),
                                 )
                        raise Exception

                # Consulta OK! Plotando o Gr√°fico
                limpa_terminal
                tabela = pd.DataFrame.from_dict(consulta_semestral.dados_semestre,
                                                orient='index')

                fig = px.line(tabela, y='IQAr', x=tabela.index,
                              title=f'√çndice de Qualidade do Ar no semestre'
                              )
                fig.update_yaxes(title='√çndice')
                fig.update_xaxes(title='Meses')

                dados_iqar = tabela[['IQAr']].replace('NA', np.nan)
                dias_indisponivel = dados_iqar.isnull().sum().to_string()[
                    7:]
                media = dados_iqar.dropna().mean().to_string()[7:]
                minimo = dados_iqar.dropna().min().to_string()[7:]
                maximo = dados_iqar.dropna().max().to_string()[7:]

                def grafico_detalhes(e):
                    fig.show()

                page.clean()
                page.add(Text(value='Consulta realizada ü§ìüëå',
                              size=30, font_family=FONTE),
                         ft.Row(controls=[
                             ElevatedButton(on_click=lambda _: consulta_semestral.obter_excel(),
                                            text='Obter Planilha'),
                             ElevatedButton(on_click=lambda _: consulta_semestral.obter_csv(),
                                            text='Obter .csv'),
                             ElevatedButton(on_click=grafico_detalhes,
                                            text='Gr√°fico detalhado'),
                             ElevatedButton(text='Voltar',
                                            on_click=lambda _: main())],
                                alignment='center'
                                ),
                         Text(value=f'√çndice de Qualidade do Ar no 2¬∫ Semestre de {ano_consulta} - Esta√ß√£o {estacao.value}',
                              font_family=FONTE),
                         Text(value=f'M√≠nimo: {minimo}      M√©dia:{media}      M√°ximo: {maximo}',
                              font_family=FONTE),
                         Text(value=f'Neste per√≠odo a esta√ß√£o {estacao.value} esteve indispon√≠vel {dias_indisponivel} dias.',
                         font_family=FONTE),
                         PlotlyChart(fig, expand=True)
                         )
        except ValueError:
            pass
        except:
            raise Exception

    ## P√°gina de consulta mensal ##
    def page_consulta_mensal(e):
        consulta_mensal.dados_mes.clear()
        estacao.value = ''
        estacao.error_text = ''

        page.clean()
        global mes, ano
        mes = TextField(label='M√™s', value='', width=200, max_length=2)
        ano = TextField(label='Ano', value='', width=200, max_length=4)
        botao_consulta = ElevatedButton(
            text='Consultar',
            on_click=page_consulta_mensal_click
        )
        voltar = ElevatedButton(text='Voltar',
                                on_click=lambda _: main()
                                )

        page.add(
            AppBar(title=Text('Consulta Mensal', font_family=FONTE)),
            Text(value='Dados dispon√≠veis de 2017 a 2023', font_family=FONTE),
            ft.Row(controls=[
                mes, ano, estacao, botao_estacao,], alignment='center'),
            ft.Row(controls=[
                botao_consulta, voltar
            ],
                alignment='center'
            )
        )
        page.update()

    ## P√°gina de consulta mensal ap√≥s executar a consulta ##
    def page_consulta_mensal_click(e):
        try:
            # Verificando os inputs do usu√°rio
            if not int(mes.value) in range(1, 13):
                mes.error_text = 'M√™s inv√°lido ‚ùå'
                page.update()
            if not int(ano.value) in range(2017, 2024):
                ano.error_text = 'Ano inv√°lido ‚ùå'
                page.update()
            if int(ano.value) == 2023 and int(mes.value) >= 11:
                mes.error_text = 'N√£o dispon√≠vel'
                page.update()

            elif int(mes.value) in range(1, 13) and int(ano.value) in range(2017, 2024):
                if estacao.value in estacoes:
                    mes_consulta = int(mes.value)
                    ano_consulta = int(ano.value)
                    page.clean()
                    page.add(Text(value='Realizando consulta...\nPode levar alguns instantes. Por favor, aguarde. üôÇüôÉ‚è≥',
                                  size=25, font_family=FONTE
                                  ),
                             ft.ProgressRing()
                             )
                elif not estacao.value in estacoes:
                    estacao.error_text = 'Esta√ß√£o inv√°lida ‚ùå'
                    page.update()
                    return

                # Inputs OK! Obtendo os dados
                try:
                    # Verificando se o usu√°rio j√° tem os dados
                    nome_arquivo = estacao.value.replace(' ', '_').lower()
                    caminho = f'./dados/{nome_arquivo}{ano_consulta}-{mes_consulta}.json'
                    with open(caminho, 'r') as arquivo:
                        consulta_mensal.dados_mes = json.load(arquivo)
                        consulta_mensal.mes = mes_consulta
                        consulta_mensal.ano = ano_consulta

                    consulta_mensal.estacao = estacao.value
                except FileNotFoundError:
                    try:
                        # Caso n√£o tenha os dados, executa a raspagem no site
                        consulta_mensal.consulta(estacao.value,
                                                 mes_consulta, ano_consulta)
                        consulta_mensal.obter_json()
                    except Exception:
                        # Ocorreu algum erro durante a raspagem
                        page.clean()
                        page.add(Text(value='Erro na consulta ü•¥',
                                      font_family=FONTE, size=25),
                                 ElevatedButton(text='Voltar',
                                                on_click=lambda _: main()),
                                 )
                        raise Exception

                # Consulta OK! Plotando o gr√°fico
                tabela = pd.DataFrame.from_dict(
                    consulta_mensal.dados_mes, orient='index')

                data = date(ano_consulta, mes_consulta, 1)

                fig = px.line(tabela, y='IQAr', x=tabela.index,
                              title=f'√çndice de Qualidade do Ar de {data.month}/{data.year} - Esta√ß√£o {estacao.value}'
                              )
                fig.update_yaxes(title='√çndice')
                fig.update_xaxes(title='Dias', )

                # Obtendo a media de cada parametro
                tabela = tabela.replace('NA', np.nan)
                mp10 = tabela[['MP10']].mean().to_string()[7:]
                mp25 = tabela[['MP2.5']].mean().to_string()[7:]
                o3 = tabela[['O3']].mean().to_string()[4:]
                co = tabela[['CO']].mean().to_string()[6:]
                no2 = tabela[['NO2']].mean().to_string()[6:]
                so2 = tabela[['SO2']].mean().to_string()[6:]
                iqar = tabela[['IQAr']].mean().to_string()[7:]

                def grafico_detalhes(e):
                    fig.show()

                limpa_terminal

                page.clean()
                page.add(Text(value='Consulta realizada ü§ìüëå',
                              size=30, font_family=FONTE
                              ),
                         ft.Row(
                    controls=[
                        ElevatedButton(text='Obter Planilha',
                                       on_click=lambda _: consulta_mensal.obter_excel()),
                        ElevatedButton(text='Obter .csv',
                                       on_click=lambda _: consulta_mensal.obter_csv()),
                        ElevatedButton(on_click=grafico_detalhes,
                                       text='Gr√°fico Detalhado'),
                        ElevatedButton(text='Voltar',
                                       on_click=lambda _: main()),
                    ],
                    alignment='center'
                ),
                    Text(value=f'M√©dias dos √≠ndices no m√™s',
                         font_family=FONTE),
                    Text(value=f'MP10:{mp10} | MP2.5:{mp25} | O3: {o3} | CO: {co} | NO2: {no2} | SO2: {so2} | IQAr: {iqar} ',
                         font_family=FONTE),
                    ft.Divider(),
                    Text(
                        value=f'DADOS DE {estacao.value.upper()} {mes_consulta}/{ano_consulta}', size=16),
                    ft.Markdown(
                    tabela.replace(np.nan, 'ND').to_markdown(),
                    selectable=True,
                    extension_set=ft.MarkdownExtensionSet.GITHUB_FLAVORED,
                    on_tap_link=lambda e: page.launch_url(e.data),
                )
                )
                page.scroll = 'auto'
                page.padding = 50
                page.update()
        except ValueError:
            pass
        except:
            raise Exception

    ## Menu Principal ##
    def main():
        page.scroll = None
        page.clean()
        page.add(
            AppBar(title=Text('Menu Principal', font_family=FONTE)),
            Image('minerva_logo.png',
                  width=300, height=150),
            Text(value='Dados de Polui√ß√£o do Rio'.upper(),
                 font_family=FONTE, size=30),
            ElevatedButton(text='Consulta Mensal',
                           width=170,
                           on_click=page_consulta_mensal),
            ElevatedButton(text='Consulta Anual', width=170,
                           on_click=page_consulta_anual),
            ElevatedButton(text='Boletim', width=170,
                           on_click=abrir_site),
            ElevatedButton(text='Sair',
                           width=170,
                           on_click=lambda _: page.window_close()))

    main()


if __name__ == '__main__':
    ft.app(target=app,
           assets_dir='ufrj-logo.png')
